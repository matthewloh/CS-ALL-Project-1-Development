#GUI file generated by GUI Pie, developed by Jabberwock
#https://apps.microsoft.com/store/detail/gui-pie/9P5TH15LZSL7


import os
import sys
import subprocess
import math
from tkinter import *
from tkinter import ttk
import tkinter.font


if __name__ == "__main__":
  registrationpageGUI = Tk()
else:
  registrationpageGUI = Tk()
registrationpageGUI.title('registrationpageGUI')
dpi = 96
registrationpageGUI.geometry('1920x1080')
registrationpageGUI.grid_propagate(False)
for x in range(32):
  Grid.columnconfigure(registrationpageGUI, x, weight=1, uniform='row')
  Label(registrationpageGUI, width = 1, bg = '#00FFFF').grid(row = 0, column = x, sticky = N+S+E+W)
for y in range(18):
  Grid.rowconfigure(registrationpageGUI, y, weight=1, uniform='row')
  Label(registrationpageGUI, width = 1, bg = '#00FFFF').grid(row = y, column = 0, sticky = N+S+E+W)
registrationpageGUI.configure(background='#00FFFF')
registrationpageGUI.resizable(False, False)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~WIDGETS~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

registrationpageGUI.Label1 = Label(registrationpageGUI, text = "Welcome, Student!", font = ('Arial', 16), width = 1, height = 1, fg = '#000000', bg = '#FF0000')
registrationpageGUI.Label1.grid(row = 1, column = 1, columnspan = 7, rowspan = 2, sticky = N+S+E+W)
registrationpageGUI.Label2 = Label(registrationpageGUI, text = "Important Announcement", font = ('Arial', 16), width = 1, height = 1, fg = '#000000', bg = '#FFFF00')
registrationpageGUI.Label2.grid(row = 3, column = 18, columnspan = 11, rowspan = 12, sticky = N+S+E+W)
registrationpageGUI.Label3 = Label(registrationpageGUI, text = "View Announcements", font = ('Arial', 16), width = 1, height = 1, fg = '#000000', bg = '#FF0000')
registrationpageGUI.Label3.grid(row = 9, column = 1, columnspan = 3, rowspan = 1, sticky = N+S+E+W)
registrationpageGUI.Label4 = Label(registrationpageGUI, text = "Register For Events", font = ('Arial', 16), width = 1, height = 1, fg = '#000000', bg = '#FF0000')
registrationpageGUI.Label4.grid(row = 9, column = 5, columnspan = 3, rowspan = 1, sticky = N+S+E+W)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~BUTTONS~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

def runEvent1(argument):
  if not(__name__ == '__main__'):
    from registrationpage import Event1
    try:
      Event1(argument)
    except TypeError:
      Event1()
registrationpageGUI.Button1 = Button(registrationpageGUI, text = "Button1", font = ('Arial', 16), width = 1, height = 1, fg = '#000000', command = lambda: runEvent1("Button1"), bg = '#FFAA22')
registrationpageGUI.Button1.grid(row = 5, column = 1, columnspan = 3, rowspan = 3, sticky = N+S+E+W)
registrationpageGUI.Button2 = Button(registrationpageGUI, text = "Button2", font = ('Arial', 16), width = 1, height = 1, fg = '#000000', command = lambda: runEvent1("Button2"), bg = '#FFAA22')
registrationpageGUI.Button2.grid(row = 5, column = 5, columnspan = 3, rowspan = 3, sticky = N+S+E+W)
registrationpageGUI.Button3 = Button(registrationpageGUI, text = "Logout", font = ('Arial', 16), width = 1, height = 1, fg = '#000000', command = lambda: runEvent1("Button3"), bg = '#FFAA22')
registrationpageGUI.Button3.grid(row = 16, column = 1, columnspan = 3, rowspan = 1, sticky = N+S+E+W)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~HELPER FUNCTIONS~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

def initModules():
  raise Exception('This main file is outdated. Script registrationpage.py must be updated to reflect the changes in GUI Pie v3.')
def init():
  from registrationpage import Event1
registrationpageGUI.initModules = initModules
def hide():
  registrationpageGUI.withdraw()
def show():
  registrationpageGUI.deiconify()
def hideAllWidgets():
    registrationpageGUI.Label1.grid_remove()
    registrationpageGUI.Label2.grid_remove()
    registrationpageGUI.Label3.grid_remove()
    registrationpageGUI.Label4.grid_remove()
    registrationpageGUI.Button1.grid_remove()
    registrationpageGUI.Button2.grid_remove()
    registrationpageGUI.Button3.grid_remove()
registrationpageGUI.hideAllWidgets = hideAllWidgets
def showAllWidgets():
    registrationpageGUI.Label1.grid()
    registrationpageGUI.Label2.grid()
    registrationpageGUI.Label3.grid()
    registrationpageGUI.Label4.grid()
    registrationpageGUI.Button1.grid()
    registrationpageGUI.Button2.grid()
    registrationpageGUI.Button3.grid()
registrationpageGUI.showAllWidgets = showAllWidgets
def run():
  global dimensions
  dimensions = [0,0]
  if __name__ != "__main__":
    init()
  registrationpageGUI.mainloop()
registrationpageGUI.run = run
registrationpageGUI.hide = hide
registrationpageGUI.show = show

dimensions = [registrationpageGUI.winfo_width(), registrationpageGUI.winfo_height()]
def resize():
  global registrationpageGUI, dimensions
  if registrationpageGUI.winfo_width() != dimensions[0] or registrationpageGUI.winfo_height() != dimensions[1]:
    registrationpageGUI.Label1.config(wraplength = math.ceil(registrationpageGUI.winfo_width() * 7 / 32) + 2)
    registrationpageGUI.Label2.config(wraplength = math.ceil(registrationpageGUI.winfo_width() * 11 / 32) + 2)
    registrationpageGUI.Label3.config(wraplength = math.ceil(registrationpageGUI.winfo_width() * 3 / 32) + 2)
    registrationpageGUI.Label4.config(wraplength = math.ceil(registrationpageGUI.winfo_width() * 3 / 32) + 2)
    registrationpageGUI.Button1.config(wraplength = math.ceil(registrationpageGUI.winfo_width() * 3 / 32) + 2)
    registrationpageGUI.Button2.config(wraplength = math.ceil(registrationpageGUI.winfo_width() * 3 / 32) + 2)
    registrationpageGUI.Button3.config(wraplength = math.ceil(registrationpageGUI.winfo_width() * 3 / 32) + 2)

eventID = None
registrationpageGUI.resizeDelay = 100
def resizeEvent(event):
  global eventID
  if eventID:
    registrationpageGUI.after_cancel(eventID)
  eventID = registrationpageGUI.after(registrationpageGUI.resizeDelay, resize)
registrationpageGUI.bind('<Configure>', resizeEvent)
if __name__ == "__main__":
  registrationpageGUI.run()
